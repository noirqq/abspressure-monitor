# –§–∞–π–ª: config/pyscript/pressure_monitor.py (–∏–ª–∏ config/pyscript/apps/pressure_monitor.py)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
SENSOR_ID = "sensor.openweathermap_pressure" # ID –≤–∞—à–µ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞ –¥–∞–≤–ª–µ–Ω–∏—è
INFLUXDB_MEASUREMENT = "hPa"                 # –ò–∑–º–µ—Ä–µ–Ω–∏–µ (—Ç–∞–±–ª–∏—Ü–∞) –≤ InfluxDB
INFLUXDB_FIELD = "value"                     # –ü–æ–ª–µ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–µ–Ω—Å–æ—Ä–∞

# –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ /trend
TELEGRAM_NOTIFIER_SERVICE = "notify.telegram" 

# Chat ID –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (!!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï !!!)
TELEGRAM_AUTO_ALERT_CHAT_ID = "–í–ê–®_–û–°–ù–û–í–ù–û–ô_CHAT_ID_–î–õ–Ø_–ê–í–¢–û_–£–í–ï–î–û–ú–õ–ï–ù–ò–ô" # –ù–∞–ø—Ä–∏–º–µ—Ä, "474773815"

# –ü–æ—Ä–æ–≥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è "—Ä–µ–∑–∫–æ–≥–æ" –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ /trend
SHARP_CHANGE_THRESHOLD_HPA_PER_HOUR_MANUAL = 1.0 

# ID Input Helpers –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
AUTO_THRESHOLD_HELPER = "input_number.auto_pressure_alert_threshold"
AUTO_WINDOW_HELPER = "input_number.auto_pressure_check_window_hours"
AUTO_LAST_ALERT_HELPER = "input_datetime.auto_pressure_last_alert_time"

# –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö
AUTO_ALERT_COOLDOWN_MINUTES = 180 # –ù–∞–ø—Ä–∏–º–µ—Ä, 3 —á–∞—Å–∞

def _get_pressure_data_from_influx(time_window_hours_int):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ InfluxDB –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å influxdb.query —Ä–∞–±–æ—Ç–∞–µ—Ç.
    """
    query = f"""
    SELECT 
        first("{INFLUXDB_FIELD}") AS p_start, 
        last("{INFLUXDB_FIELD}") AS p_end,
        mean("{INFLUXDB_FIELD}") AS p_mean,
        min("{INFLUXDB_FIELD}") AS p_min,
        max("{INFLUXDB_FIELD}") AS p_max
    FROM "{INFLUXDB_MEASUREMENT}"
    WHERE "entity_id" = '{SENSOR_ID}' AND time >= now() - {time_window_hours_int}h
    """
    log.info(f"Pyscript (_get_pressure_data): –ó–∞–ø—Ä–æ—Å –∫ InfluxDB:\n{query}")

    try:
        query_result_list = service.call("influxdb", "query", query=query, return_response=True)
        log.debug(f"Pyscript (_get_pressure_data): –û—Ç–≤–µ—Ç –æ—Ç influxdb.query: {query_result_list}")

        if not (isinstance(query_result_list, list) and query_result_list and 
                "values" in query_result_list[0] and query_result_list[0]["values"]):
            log.warning(f"Pyscript (_get_pressure_data): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç InfluxDB –∑–∞ {time_window_hours_int} —á.")
            return None

        series_data = query_result_list[0]
        values_row = series_data["values"][0]
        columns = series_data.get("columns", [])

        def get_val(name):
            try:
                val = values_row[columns.index(name)]
                return float(val) if val is not None else None
            except (ValueError, IndexError, TypeError): return None

        p_start, p_end = get_val("p_start"), get_val("p_end")
        if p_start is None or p_end is None:
            log.warning(f"Pyscript (_get_pressure_data): –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (p_start/p_end) –∑–∞ {time_window_hours_int} —á.")
            return None
        
        p_mean = get_val("p_mean") if get_val("p_mean") is not None else p_end
        p_min = get_val("p_min") if get_val("p_min") is not None else min(p_start, p_end)
        p_max = get_val("p_max") if get_val("p_max") is not None else max(p_start, p_end)
        
        return {
            "p_start": p_start, "p_end": p_end, "p_mean": p_mean,
            "p_min": p_min, "p_max": p_max, "hours": time_window_hours_int
        }

    except Exception as e:
        import traceback 
        log.error(f"Pyscript (_get_pressure_data): –û–®–ò–ë–ö–ê –∑–∞–ø—Ä–æ—Å–∞/–æ–±—Ä–∞–±–æ—Ç–∫–∏ InfluxDB: {e}\n{traceback.format_exc()}")
        return None

def _format_pressure_message(pressure_data, threshold_for_alert_text, for_auto_alert=False):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞–≤–ª–µ–Ω–∏–∏.
    """
    p_start, p_end, p_mean = pressure_data["p_start"], pressure_data["p_end"], pressure_data["p_mean"]
    p_min, p_max, hours = pressure_data["p_min"], pressure_data["p_max"], pressure_data["hours"]

    pressure_delta = p_end - p_start
    rate_hpa_per_hour = (pressure_delta / hours) if hours > 0 else 0

    h_word = "—á–∞—Å" if hours%10==1 and hours%100!=11 else \
             "—á–∞—Å–∞" if hours%10 in [2,3,4] and hours%100 not in [12,13,14] else "—á–∞—Å–æ–≤"
    
    dir_w, trend_icon = "–∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞", "‚û°Ô∏è"
    if rate_hpa_per_hour > 0.05: dir_w, trend_icon = "–≤—ã—Ä–æ—Å–ª–æ –Ω–∞", "üìà"
    elif rate_hpa_per_hour < -0.05: dir_w, trend_icon = "—É–ø–∞–ª–æ –Ω–∞", "üìâ"
    
    curr_p_state = state.get(SENSOR_ID)
    curr_p_str = f"{float(curr_p_state.state):.1f} –≥–ü–∞" if curr_p_state and curr_p_state.state not in ["unknown","unavailable"] else "N/A"
    
    title_prefix = "‚ö†Ô∏è *–ê–í–¢–û-–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –î–ê–í–õ–ï–ù–ò–ò* ‚ö†Ô∏è\n" if for_auto_alert else ""
    is_sharp_change = abs(rate_hpa_per_hour) >= threshold_for_alert_text
    sharp_alert_msg_part = f"–±–æ–ª–µ–µ {threshold_for_alert_text:.1f} –≥–ü–∞/—á–∞—Å"
    
    msg_parts = [
        f"{title_prefix}{trend_icon} *–ê–Ω–∞–ª–∏–∑ –¥–∞–≤–ª–µ–Ω–∏—è –∑–∞ {hours} {h_word}*",
        f" ‚Ä¢ –ü–µ—Ä–∏–æ–¥: `{p_start:.1f} –≥–ü–∞` ‚Üí `{p_end:.1f} –≥–ü–∞`",
        f" ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {dir_w} `{abs(pressure_delta):.1f} –≥–ü–∞`",
        f" ‚Ä¢ –°—Ä. —Å–∫–æ—Ä–æ—Å—Ç—å: `{rate_hpa_per_hour:.1f} –≥–ü–∞/—á–∞—Å`",
        f" ‚Ä¢ –ú–∏–Ω/–ú–∞–∫—Å/–°—Ä–µ–¥: `{p_min:.1f}` / `{p_max:.1f}` / `{p_mean:.1f} –≥–ü–∞`",
        f" ‚Ä¢ –¢–µ–∫—É—â–µ–µ (—Å–µ–Ω—Å–æ—Ä): `{curr_p_str}`"
    ]

    if is_sharp_change:
        alert_text = f"\n\n*–í–Ω–∏–º–∞–Ω–∏–µ! –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ({sharp_alert_msg_part})!*"
        msg_parts.append(alert_text)
        
    final_msg = "\n".join(msg_parts)
        
    return final_msg, rate_hpa_per_hour, is_sharp_change


def _send_telegram_message_pyscript(chat_id, message, parse_mode=None, notifier_service=TELEGRAM_NOTIFIER_SERVICE):
    if not chat_id: log.error("Pyscript (_send_telegram_message_pyscript): chat_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."); return
    try:
        domain, service_name = notifier_service.split('.', 1)
        s_data = {"message": message, "data": {"target": str(chat_id)}}
        if parse_mode: s_data["data"]["parse_mode"] = parse_mode
        service.call(domain, service_name, **s_data)
    except Exception as e1:
        log.warning(f"Pyscript: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {notifier_service}: {e1}. –ü—Ä–æ–±—É—é telegram_bot.send_message.")
        try:
            s_data_direct = {"target": int(chat_id), "message": message}
            if parse_mode: s_data_direct["parse_mode"] = parse_mode
            service.call("telegram_bot", "send_message", **s_data_direct)
        except Exception as e2: log.error(f"Pyscript: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

# --- –°–ï–†–í–ò–°–´ PYSCRIPT ---

@service
def get_pressure_analysis_for_telegram(hours_str=None, chat_id=None, user_id=None):
    log.info("--------------------------------------------------")
    log.info(f"Pyscript: –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å /trend: hours_str='{hours_str}', chat_id='{chat_id}'")
    if not chat_id: return
    if hours_str is None or (isinstance(hours_str, str) and not hours_str.strip()):
        _send_telegram_message_pyscript(chat_id, "–£–∫–∞–∂–∏—Ç–µ —á–∞—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–∏–º–µ—Ä: /trend 2")
        return

    time_window_hours = 0
    try:
        time_window_hours = int(hours_str)
        if not (0 < time_window_hours <= 720): raise ValueError("–ß–∞—Å—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except ValueError:
        _send_telegram_message_pyscript(chat_id, f"–û—à–∏–±–∫–∞: '{hours_str}' - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤.")
        return
    
    pressure_data = _get_pressure_data_from_influx(time_window_hours)
    if pressure_data is None:
        _send_telegram_message_pyscript(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ InfluxDB –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    final_msg, _, _ = _format_pressure_message(pressure_data, threshold_for_alert_text=SHARP_CHANGE_THRESHOLD_HPA_PER_HOUR_MANUAL, for_auto_alert=False)
    _send_telegram_message_pyscript(chat_id, final_msg, parse_mode="Markdown")
    log.info("Pyscript: –†—É—á–Ω–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


@service
def check_pressure_for_auto_alert():
    log.info("--------------------------------------------------")
    log.info("Pyscript: –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è –ó–ê–ü–£–©–ï–ù–ê")

    try:
        threshold_hpa_per_hour_auto = float(state.get(AUTO_THRESHOLD_HELPER).state)
        time_window_hours_auto = int(float(state.get(AUTO_WINDOW_HELPER).state)) 
    except Exception as e:
        log.error(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ Input Helpers: {e}")
        return

    log.info(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –ü–æ—Ä–æ–≥={threshold_hpa_per_hour_auto} –≥–ü–∞/—á, –û–∫–Ω–æ={time_window_hours_auto} —á.")

    now_ts = task.executor.time()
    last_alert_dt_state = state.get(AUTO_LAST_ALERT_HELPER)
    if last_alert_dt_state and last_alert_dt_state.state != 'unknown':
        try:
            from datetime import datetime 
            last_alert_dt_obj = datetime.fromisoformat(last_alert_dt_state.state)
            last_alert_ts = last_alert_dt_obj.timestamp()
            if (now_ts - last_alert_ts) < (AUTO_ALERT_COOLDOWN_MINUTES * 60):
                log.info(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –ö—É–ª–¥–∞—É–Ω. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {last_alert_dt_state.state}.")
                return
        except Exception as e:
            log.warning(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('{last_alert_dt_state.state}'): {e}.")
    else:
        log.info(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    pressure_data = _get_pressure_data_from_influx(time_window_hours_auto)
    if pressure_data is None:
        log.warning("Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö InfluxDB –¥–ª—è –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    final_msg, rate_hpa_per_hour, is_sharp_change = _format_pressure_message(
        pressure_data, 
        threshold_for_alert_text=threshold_hpa_per_hour_auto, 
        for_auto_alert=True
    )

    if is_sharp_change: 
        log.info(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –û–ë–ù–ê–†–£–ñ–ï–ù–û –†–ï–ó–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï! –°–∫–æ—Ä–æ—Å—Ç—å: {rate_hpa_per_hour:.1f} –≥–ü–∞/—á.")
        _send_telegram_message_pyscript(TELEGRAM_AUTO_ALERT_CHAT_ID, final_msg, parse_mode="Markdown")
        try:
            from datetime import datetime
            dt_obj_to_set = datetime.now() 
            service.call("input_datetime", "set_datetime", entity_id=AUTO_LAST_ALERT_HELPER, 
                         datetime=dt_obj_to_set.isoformat(sep=' ', timespec='seconds'))
            log.info(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e_dt:
            log.error(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e_dt}")
    else:
        log.info(f"Pyscript (–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞): –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è ({rate_hpa_per_hour:.1f} –≥–ü–∞/—á) –≤ –Ω–æ—Ä–º–µ.")
    log.info("Pyscript: –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è –ó–ê–í–ï–†–®–ï–ù–ê")
    log.info("--------------------------------------------------")